{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Given an array nums which consists of non-negative integers and an integer m, you can split the array into m non-empty continuous subarrays.\n",
    "\n",
    "Write an algorithm to minimize the largest sum among these m subarrays."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Example 1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Input: nums = [7,2,5,10,8], m = 2\n",
    "\n",
    "Output: 18\n",
    "\n",
    "Explanation:\n",
    "There are four ways to split nums into two subarrays.\n",
    "The best way is to split it into [7,2,5] and [10,8],\n",
    "where the largest sum among the two subarrays is only 18.\n",
    "Example 2:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Example 2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Input: nums = [1,2,3,4,5], m = 2\n",
    "\n",
    "Output: 9"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Example 3"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "Input: nums = [1,4,4], m = 3\n",
    "\n",
    "Output: 4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 167,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "from typing import List"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 201,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "7 32\n",
      "2 32\n",
      "5 32\n",
      "10 32\n",
      "8 32\n",
      "7 21\n",
      "2 21\n",
      "5 21\n",
      "10 21\n",
      "8 21\n",
      "7 21\n",
      "2 21\n",
      "5 21\n",
      "10 21\n",
      "8 21\n",
      "7 18\n",
      "2 18\n",
      "5 18\n",
      "10 18\n",
      "8 18\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "18"
      ]
     },
     "execution_count": 201,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "class Solution:\n",
    "    def splitArray(self, nums: List[int], m: int) -> int:\n",
    "        #convert to numpy array for ease\n",
    "        #nums = np.array(nums)\n",
    "        \n",
    "        #find the lowest such a list could be\n",
    "        #which is the value of the greatest number in the list\n",
    "        #because best case scenario a subset that doesn't include\n",
    "        #this number would have to exceed it to have the largest value\n",
    "        #lowerLimit = nums.max()\n",
    "        lowerLimit = max(nums)\n",
    "\n",
    "        #the upper limit would be the value of the whole subset since no subset\n",
    "        #would have a value greater\n",
    "        #upperLimit = nums.sum()\n",
    "        upperLimit = sum(nums)\n",
    "\n",
    "        #we will need a loop that iterates monotonically so that we can gaurantee \n",
    "        #a halt and we will be decrementing the upper limit unit it gets to our lower limit\n",
    "        #to see which was the lowest largest sum while also incrementing our lower limit\n",
    "        #whenever we search the list  and the times searched exceeds the amount of slices\n",
    "        #of our list\n",
    "        while lowerLimit < upperLimit:\n",
    "            #this variable will be iterated over and as we start summing subsets\n",
    "            #it will be with this variable we both store the current largest and\n",
    "            #what we will replace and compare other subsets with\n",
    "            runningTotal = 0\n",
    "\n",
    "            #this variable manages our iterations whenever in our search through the list\n",
    "            #we come across the state where iadding the current number to our runningTotal\n",
    "            #would be greater than our midpoint between our limits, which makes this a binary\n",
    "            #search algo. also we start at 1\n",
    "            searchCount = 1\n",
    "\n",
    "            #we want to maintain a midpoint so we know whether to try changing our upper or lower bounds\n",
    "            #and when to add to our running total or when to erase our runningTotal\n",
    "            midpoint = (upperLimit + lowerLimit) // 2\n",
    "\n",
    "            #this will be our testing loop where our conditionals are applied through the list\n",
    "            for num in nums:\n",
    "                print(num,upperLimit)\n",
    "                #as we iterate through the list, we want to see if our running total is going to be less \n",
    "                #than or equal to our midpoint, because we will grow our total if it is or otherwise \n",
    "                #set our total to the num and start again from there\n",
    "                if runningTotal + num <= midpoint:\n",
    "                    runningTotal += num\n",
    "                else:\n",
    "                    runningTotal = num\n",
    "                    searchCount += 1    \n",
    "                \n",
    "            #after going through the list, we want to see if our interations line \n",
    "            #up with our number of subset splits because\n",
    "            #checking further requires us to increase our lower bound to our midpoint\n",
    "            \n",
    "            if searchCount > m:\n",
    "                lowerLimit = midpoint + 1\n",
    "            else:\n",
    "                upperLimit = midpoint\n",
    "        return upperLimit\n",
    "temp = Solution\n",
    "temp.splitArray(temp, [7,2,5,10,8], 2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 203,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "18"
      ]
     },
     "execution_count": 203,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "class Solution:\n",
    "    def splitArray(self, nums: List[int], m: int) -> int:\n",
    "        def isPossible(maxSum):\n",
    "            curr = count = 0\n",
    "            for i in nums:\n",
    "                count += (i + curr > maxSum)\n",
    "                curr = curr + i if i + curr <= maxSum else i\n",
    "            return count + 1 <= m\n",
    "        \n",
    "        lo, hi = max(nums), sum(nums)\n",
    "        while lo <= hi:\n",
    "            mid = (lo + hi) // 2\n",
    "            if isPossible(mid): hi = mid - 1\n",
    "            else: lo = mid + 1\n",
    "        return lo\n",
    "temp = Solution\n",
    "temp.splitArray(temp, [7,2,5,10,8], 2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 170,
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "EOF while scanning triple-quoted string literal (1432071632.py, line 30)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;36m  Input \u001b[0;32mIn [170]\u001b[0;36m\u001b[0m\n\u001b[0;31m    \u001b[0m\n\u001b[0m    ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m EOF while scanning triple-quoted string literal\n"
     ]
    }
   ],
   "source": [
    "\n",
    "\n",
    "#this answers a different question\n",
    "\n",
    "'''class Solution:\n",
    "    def splitArray(self, nums: List[int], m: int) -> int:\n",
    "        #we use numpy arrays for ease of operations like .sum()\n",
    "        npnums = np.array(nums)\n",
    "        #need a number to represent the amount of subgroups that you get\n",
    "\n",
    "        increments = int(npnums.size // m)\n",
    "        currentHighestSum = 0\n",
    "        if m == npnums.size:\n",
    "            for i in npnums:\n",
    "                currentHighestSum += i\n",
    "            return currentHighestSum\n",
    "        elif m > npnums.size:\n",
    "            raise Exception(\"buddy....\")\n",
    "        else:\n",
    "            \n",
    "            #for i in range(npnums.size - m + 1):\n",
    "            #    currentSum = 0\n",
    "            #    for n in npnums[i:i+m]:\n",
    "            #        currentSum += n\n",
    "            #    if currentSum >= currentHighestSum:\n",
    "            #        currentHighestSum = currentSum\n",
    "    \n",
    "        print(increments)\n",
    "        return currentHighestSum\n",
    "\n",
    "\n",
    "                    "
   ]
  }
 ],
 "metadata": {
  "interpreter": {
   "hash": "5cb451d39beecfc9cc0fc417a38f93c707248a4cefc69ab2e1c68ce1f2eb2cfa"
  },
  "kernelspec": {
   "display_name": "Python 3.9.7 (conda)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  },
  "orig_nbformat": 4
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
