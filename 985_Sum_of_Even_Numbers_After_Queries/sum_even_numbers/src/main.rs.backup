fn main() {
    // Iterators can be collected into vectors
    let collected_iterator:Vec<i32> = (0..10).collect();
    println!("Hello, world! Collected (0..10) into {:?}", collected_iterator);

    // The `vec!` macro can be used to initialize a vector
    let mut xs = vec![1i32, 2,3];
    println!("Initial Vector: {:?}", xs);

    // Insert new element at the end of the vector
    println!("Push a 4 into the initial vector");
    xs.push(4);
    println!("New üÖ±Ô∏èector: {:?}", xs);

    // Error! Immutable vectors can't grow
    println!("Because the collected üÖ±Ô∏èector was initialized as `let collected_iterator:Vec<i32>`, we can't change it post-initialization.");
    //collected_iterator.push(0)

    // The `len` method yields the number of elements currently stored in a vector
    println!("Current size of our üÖ±Ô∏èector: {:?}", xs.len());

    // Indexing is done using the square brackets (indexing starts at 0)
    // `pop` removes the last element from the vector and returns it
    // Out of bounds indexing yields a panic

    // `Vector`s can be easily iterated over
    println!("Contents of xs: ");
    for x in xs.iter() {
        println!("> {:?}", x);
    }

    // A `Vector` can also be iterated over while the iteration
    // count is enumerated in a separate variable (`i`)
    println!("Incase you missed it, here are the contents of xs.");
    for (i,x) in xs.iter().enumerate() {
        println!(">position -> {}, value -> {}", i, x);
    }

    // Thanks to `iter_mut`, mutable `Vector`s can also be iterated
    // over in a way that allows modifying each value
    for x in xs.iter_mut() {
        *x *= 3;
    }
    println!("Updated üÖ±Ô∏èector * 3: {:?}",xs)
}
