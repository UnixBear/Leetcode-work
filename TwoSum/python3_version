{
 "metadata": {
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7-final"
  },
  "orig_nbformat": 2,
  "kernelspec": {
   "name": "python39264bit64f6ee2884d24d779c36c7b45d5d82b0",
   "display_name": "Python 3.9.2 64-bit"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2,
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 160,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Definition for singly-linked list.\n",
    "from typing import Optional\n",
    "class ListNode:\n",
    "    def __init__(self, val=0, next=None):\n",
    "        self.val = val\n",
    "        self.next = next\n",
    "\n",
    "        \n",
    "class Solution:\n",
    "    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]):\n",
    "        tempNode = returnNode = ListNode()\n",
    "        extra = 0\n",
    "        while l1 or l2:\n",
    "            tempValue1 = 0\n",
    "            tempValue2 = 0\n",
    "            if l1:\n",
    "                tempValue1 = l1.val\n",
    "                l1 = l1.next\n",
    "                #print(tempValue1)\n",
    "            if l2:\n",
    "                tempValue2 = l2.val\n",
    "                l2 = l2.next\n",
    "            cumulative = tempValue1 + tempValue2 + extra\n",
    "            #print(cumulative)\n",
    "            tempNode.next = ListNode(cumulative%10)\n",
    "            tempNode = tempNode.next\n",
    "            extra = cumulative//10\n",
    "            #print(cumulative)\n",
    "            #print(extra)\n",
    "\n",
    "            if extra != 0:\n",
    "                tempNode.next = ListNode(extra)\n",
    "        return returnNode.next\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 161,
   "metadata": {},
   "outputs": [
    {
     "output_type": "execute_result",
     "data": {
      "text/plain": [
       "6"
      ]
     },
     "metadata": {},
     "execution_count": 161
    }
   ],
   "source": [
    "b = ListNode(4)\n",
    "a = ListNode(5,b)\n",
    "y = ListNode(3)\n",
    "x = ListNode(1,y)\n",
    "\n",
    "sol = Solution\n",
    "sol.addTwoNumbers(None,x,a).val"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ]
}